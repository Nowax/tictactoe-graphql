/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

export {}

declare global {
  namespace GQL {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface Query {
      _empty?: string

      /**
       *  get all games
       */
      getGames?: Array<Game | null>
    }

    export interface Game {
      id?: string
      userId?: string
      text?: string
      timestamp?: string
    }

    export interface Mutation {
      _empty?: string

      /**
       *  create a new game
       */
      createGame?: Game
    }

    /**
     *  input to create a new game
     */
    export interface InputCreateGame {
      type?: string
    }

    export interface Subscription {
      _empty?: string

      /**
       *  called when a new move noticed in game
       */
      gameStateRefreshed?: Game
    }

    /**
     *  input to join the existing game
     */
    export interface InputJoinGame {
      gameID?: string
    }

    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      Query?: QueryTypeResolver
      Game?: GameTypeResolver
      Mutation?: MutationTypeResolver
      Subscription?: SubscriptionTypeResolver
    }
    export interface QueryTypeResolver<TParent = any> {
      _empty?: QueryTo_emptyResolver<TParent>
      getGames?: QueryToGetGamesResolver<TParent>
    }

    export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
    }

    export interface QueryToGetGamesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
    }

    export interface GameTypeResolver<TParent = any> {
      id?: GameToIdResolver<TParent>
      userId?: GameToUserIdResolver<TParent>
      text?: GameToTextResolver<TParent>
      timestamp?: GameToTimestampResolver<TParent>
    }

    export interface GameToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
    }

    export interface GameToUserIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
    }

    export interface GameToTextResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
    }

    export interface GameToTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
    }

    export interface MutationTypeResolver<TParent = any> {
      _empty?: MutationTo_emptyResolver<TParent>
      createGame?: MutationToCreateGameResolver<TParent>
    }

    export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
    }

    export interface MutationToCreateGameArgs {
      input: InputCreateGame
    }
    export interface MutationToCreateGameResolver<TParent = any, TResult = any> {
      (
        parent: TParent,
        args: MutationToCreateGameArgs,
        context: any,
        info: GraphQLResolveInfo
      ): TResult
    }

    export interface SubscriptionTypeResolver<TParent = any> {
      _empty?: SubscriptionTo_emptyResolver<TParent>
      gameStateRefreshed?: SubscriptionToGameStateRefreshedResolver<TParent>
    }

    export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult
      subscribe: (
        parent: TParent,
        args: {},
        context: any,
        info: GraphQLResolveInfo
      ) => AsyncIterator<TResult>
    }

    export interface SubscriptionToGameStateRefreshedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult
      subscribe: (
        parent: TParent,
        args: {},
        context: any,
        info: GraphQLResolveInfo
      ) => AsyncIterator<TResult>
    }
  }
}
