/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  namespace GQL {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface Query {
      _empty?: string;
      
      /**
       *  get all games 
       */
      getGames?: Array<Game | null>;
    }
    
    export interface Game {
      id?: string;
      type: GameType;
      timestamp?: string;
      playerOneID?: string;
      playerTwoID?: string;
      status?: GameStatus;
      latestMovePlayerID?: string;
      state?: string;
    }
    
    export const enum GameType {
      SINGLEPLAYER = 'SINGLEPLAYER',
      MULTIPLAYER = 'MULTIPLAYER'
    }
    
    export const enum GameStatus {
      NEW = 'NEW',
      STARTED = 'STARTED',
      FINISHED = 'FINISHED'
    }
    
    export interface Mutation {
      _empty?: string;
      
      /**
       *  create a new game 
       */
      createGame?: Game;
      
      /**
       *  join the existing game 
       */
      joinGame?: PlayerToken;
    }
    
    /**
     *  input to create a new game 
     */
    export interface InputCreateGame {
      type: GameType;
    }
    
    /**
     *  input to join the existing game
     */
    export interface InputJoinGame {
      gameID: string;
    }
    
    export interface PlayerToken {
      id?: string;
    }
    
    export interface Subscription {
      _empty?: string;
      
      /**
       *  called when a new move noticed in game 
       */
      gameStateRefreshed?: Game;
    }
    
    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      Query?: QueryTypeResolver;
      Game?: GameTypeResolver;
      Mutation?: MutationTypeResolver;
      PlayerToken?: PlayerTokenTypeResolver;
      Subscription?: SubscriptionTypeResolver;
    }
    export interface QueryTypeResolver<TParent = any> {
      _empty?: QueryTo_emptyResolver<TParent>;
      getGames?: QueryToGetGamesResolver<TParent>;
    }
    
    export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetGamesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameTypeResolver<TParent = any> {
      id?: GameToIdResolver<TParent>;
      type?: GameToTypeResolver<TParent>;
      timestamp?: GameToTimestampResolver<TParent>;
      playerOneID?: GameToPlayerOneIDResolver<TParent>;
      playerTwoID?: GameToPlayerTwoIDResolver<TParent>;
      status?: GameToStatusResolver<TParent>;
      latestMovePlayerID?: GameToLatestMovePlayerIDResolver<TParent>;
      state?: GameToStateResolver<TParent>;
    }
    
    export interface GameToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToPlayerOneIDResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToPlayerTwoIDResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToStatusResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToLatestMovePlayerIDResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface GameToStateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationTypeResolver<TParent = any> {
      _empty?: MutationTo_emptyResolver<TParent>;
      createGame?: MutationToCreateGameResolver<TParent>;
      joinGame?: MutationToJoinGameResolver<TParent>;
    }
    
    export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateGameArgs {
      input: InputCreateGame;
    }
    export interface MutationToCreateGameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateGameArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToJoinGameArgs {
      input: InputJoinGame;
    }
    export interface MutationToJoinGameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToJoinGameArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PlayerTokenTypeResolver<TParent = any> {
      id?: PlayerTokenToIdResolver<TParent>;
    }
    
    export interface PlayerTokenToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubscriptionTypeResolver<TParent = any> {
      _empty?: SubscriptionTo_emptyResolver<TParent>;
      gameStateRefreshed?: SubscriptionToGameStateRefreshedResolver<TParent>;
    }
    
    export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToGameStateRefreshedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
  }
}