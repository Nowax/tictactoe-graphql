/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  _empty?: string;
  
  /**
   *  get all games 
   */
  getGames?: Array<GQLGamePublicInfo | null>;
}

export interface GQLGamePublicInfo {
  id?: string;
  type: GQLGameType;
  timestamp?: string;
  winner?: GQLWinnerType;
  stateHistory: Array<string>;
  status: GQLGameStatus;
}

export enum GQLGameType {
  SINGLEPLAYER = 'SINGLEPLAYER',
  MULTIPLAYER = 'MULTIPLAYER'
}

export enum GQLWinnerType {
  NONE = 'NONE',
  Xs = 'Xs',
  Os = 'Os',
  DRAW = 'DRAW'
}

export enum GQLGameStatus {
  NEW = 'NEW',
  STARTED = 'STARTED',
  FINISHED = 'FINISHED'
}

export interface GQLMutation {
  _empty?: string;
  
  /**
   *  create a new game 
   */
  createGame?: GQLGame;
  
  /**
   *  join the existing game 
   */
  joinGame?: GQLPlayer;
  
  /**
   *  make move in specific game 
   */
  makeMove?: GQLGamePublicInfo;
}

/**
 *  input to create a new game 
 */
export interface GQLInputCreateGame {
  type: GQLGameType;
}

export interface GQLGame {
  id?: string;
  type: GQLGameType;
  timestamp?: string;
  winner?: GQLWinnerType;
  stateHistory: Array<string>;
  status: GQLGameStatus;
  playerX?: GQLPlayer;
  playerO?: GQLPlayer;
  latestMovePlayerID?: string;
}

export interface GQLPlayer {
  id: string;
  mark: GQLMarkType;
}

export enum GQLMarkType {
  X = 'X',
  O = 'O'
}

/**
 *  input to join the existing game
 */
export interface GQLInputJoinGame {
  gameID: string;
}

/**
 *  input to make move in existing game 
 */
export interface GQLInputMakeMove {
  gameID: string;
  userID: string;
  newState: string;
}

export interface GQLSubscription {
  _empty?: string;
  
  /**
   *  called when a new move noticed in game 
   */
  gameStateRefreshed?: GQLGamePublicInfo;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  GamePublicInfo?: GQLGamePublicInfoTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Game?: GQLGameTypeResolver;
  Player?: GQLPlayerTypeResolver;
  Subscription?: GQLSubscriptionTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  _empty?: QueryTo_emptyResolver<TParent>;
  getGames?: QueryToGetGamesResolver<TParent>;
}

export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetGamesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGamePublicInfoTypeResolver<TParent = any> {
  id?: GamePublicInfoToIdResolver<TParent>;
  type?: GamePublicInfoToTypeResolver<TParent>;
  timestamp?: GamePublicInfoToTimestampResolver<TParent>;
  winner?: GamePublicInfoToWinnerResolver<TParent>;
  stateHistory?: GamePublicInfoToStateHistoryResolver<TParent>;
  status?: GamePublicInfoToStatusResolver<TParent>;
}

export interface GamePublicInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GamePublicInfoToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GamePublicInfoToTimestampResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GamePublicInfoToWinnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GamePublicInfoToStateHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GamePublicInfoToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  _empty?: MutationTo_emptyResolver<TParent>;
  createGame?: MutationToCreateGameResolver<TParent>;
  joinGame?: MutationToJoinGameResolver<TParent>;
  makeMove?: MutationToMakeMoveResolver<TParent>;
}

export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateGameArgs {
  input: GQLInputCreateGame;
}
export interface MutationToCreateGameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateGameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToJoinGameArgs {
  input: GQLInputJoinGame;
}
export interface MutationToJoinGameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToJoinGameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMakeMoveArgs {
  input: GQLInputMakeMove;
}
export interface MutationToMakeMoveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMakeMoveArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGameTypeResolver<TParent = any> {
  id?: GameToIdResolver<TParent>;
  type?: GameToTypeResolver<TParent>;
  timestamp?: GameToTimestampResolver<TParent>;
  winner?: GameToWinnerResolver<TParent>;
  stateHistory?: GameToStateHistoryResolver<TParent>;
  status?: GameToStatusResolver<TParent>;
  playerX?: GameToPlayerXResolver<TParent>;
  playerO?: GameToPlayerOResolver<TParent>;
  latestMovePlayerID?: GameToLatestMovePlayerIDResolver<TParent>;
}

export interface GameToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToTimestampResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToWinnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToStateHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToPlayerXResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToPlayerOResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GameToLatestMovePlayerIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPlayerTypeResolver<TParent = any> {
  id?: PlayerToIdResolver<TParent>;
  mark?: PlayerToMarkResolver<TParent>;
}

export interface PlayerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PlayerToMarkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  _empty?: SubscriptionTo_emptyResolver<TParent>;
  gameStateRefreshed?: SubscriptionToGameStateRefreshedResolver<TParent>;
}

export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToGameStateRefreshedArgs {
  gameID: string;
}
export interface SubscriptionToGameStateRefreshedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToGameStateRefreshedArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToGameStateRefreshedArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}
