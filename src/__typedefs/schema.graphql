# source: http://localhost:3000/graphql
# timestamp: Thu May 07 2020 16:21:21 GMT+0200 (Central European Summer Time)

type Game {
  id: ID
  type: GameType!
  timestamp: String
  winner: WinnerType
  stateHistory: [String!]!
  status: GameStatus!
  playerX: Player
  playerO: Player
  latestMovePlayerID: ID
}

type GamePublicInfo {
  id: ID
  type: GameType!
  timestamp: String
  winner: WinnerType
  stateHistory: [String!]!
  status: GameStatus!
}

enum GameStatus {
  NEW
  STARTED
  FINISHED
}

enum GameType {
  SINGLEPLAYER
  MULTIPLAYER
}

""" input to create a new game """
input InputCreateGame {
  type: GameType!
}

""" input to join the existing game"""
input InputJoinGame {
  gameID: ID!
}

""" input to make move in existing game """
input InputMakeMove {
  gameID: ID!
  userID: ID!
  newState: String!
}

enum MarkType {
  X
  O
}

type Mutation {
  _empty: String

  """ create a new game """
  createGame(input: InputCreateGame!): Game

  """ join the existing game """
  joinGame(input: InputJoinGame!): Player

  """ make move in specific game """
  makeMove(input: InputMakeMove!): GamePublicInfo
}

type Player {
  id: ID!
  mark: MarkType!
}

type Query {
  _empty: String

  """ get all games """
  getGames: [GamePublicInfo]
}

type Subscription {
  _empty: String

  """ called when a new move noticed in game """
  gameStateRefreshed(gameID: ID!): GamePublicInfo
}

enum WinnerType {
  NONE
  Xs
  Os
  DRAW
}
